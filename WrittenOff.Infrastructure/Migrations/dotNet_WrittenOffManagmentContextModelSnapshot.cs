// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WrittenOffManagement.Infrastructure.Persistence;

#nullable disable

namespace WrittenOffManagement.Infrastructure.Migrations
{
    [DbContext(typeof(dotNet_WrittenOffManagmentContext))]
    partial class dotNet_WrittenOffManagmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("WrittenOffManagement.Domain.Entities.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("employees", (string)null);
                });

            modelBuilder.Entity("WrittenOffManagement.Domain.Entities.WrittenOff", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Isbn")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex(new[] { "Isbn" }, "UK_writtenOffs")
                        .IsUnique();

                    b.ToTable("writtenOffs", (string)null);
                });

            modelBuilder.Entity("WrittenOffManagement.Domain.Entities.Employee", b =>
                {
                    b.OwnsOne("WrittenOffManagement.Domain.ValueObject.EmployeeName", "Name", b1 =>
                        {
                            b1.Property<long>("EmployeeId")
                                .HasColumnType("bigint");

                            b1.Property<string>("FirstName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("EmployeeId");

                            b1.ToTable("employees");

                            b1.WithOwner()
                                .HasForeignKey("EmployeeId");
                        });

                    b.Navigation("Name")
                        .IsRequired();
                });

            modelBuilder.Entity("WrittenOffManagement.Domain.Entities.WrittenOff", b =>
                {
                    b.HasOne("WrittenOffManagement.Domain.Entities.Employee", "Employee")
                        .WithMany("WrittenOffs")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK_writenOffs_employees");

                    b.OwnsOne("WrittenOffManagement.Domain.ValueObject.Author", "Author", b1 =>
                        {
                            b1.Property<long>("WrittenOffId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Descritption")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AuthorDescritption");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("AuthorName");

                            b1.HasKey("WrittenOffId");

                            b1.ToTable("writtenOffs");

                            b1.WithOwner()
                                .HasForeignKey("WrittenOffId");
                        });

                    b.OwnsOne("WrittenOffManagement.Domain.ValueObject.Publisher", "Publisher", b1 =>
                        {
                            b1.Property<long>("WrittenOffId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Descritption")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PublisherDescritption");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("PublisherName");

                            b1.HasKey("WrittenOffId");

                            b1.ToTable("writtenOffs");

                            b1.WithOwner()
                                .HasForeignKey("WrittenOffId");
                        });

                    b.Navigation("Author")
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Publisher")
                        .IsRequired();
                });

            modelBuilder.Entity("WrittenOffManagement.Domain.Entities.Employee", b =>
                {
                    b.Navigation("WrittenOffs");
                });
#pragma warning restore 612, 618
        }
    }
}
