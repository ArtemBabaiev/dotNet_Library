// <auto-generated />
using System;
using Catalog.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Catalog.DAL.Migrations
{
    [DbContext(typeof(dotNet_CatalogContext))]
    [Migration("20221010222905_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Catalog.DAL.Entity.Author", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Exemplar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsLend")
                        .HasColumnType("bit");

                    b.Property<long>("LiteratureId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("LiteratureId");

                    b.ToTable("exemplars", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Genre", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Literature", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<long>("GenreId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsLendable")
                        .HasColumnType("bit");

                    b.Property<string>("Isbn")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("LendPeriodInDays")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("NumberOfPages")
                        .HasColumnType("int");

                    b.Property<long>("PublisherId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PublishingYear")
                        .HasColumnType("int");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("PublisherId");

                    b.HasIndex("TypeId");

                    b.HasIndex(new[] { "Isbn" }, "UK_literature")
                        .IsUnique()
                        .HasFilter("[Isbn] IS NOT NULL");

                    b.ToTable("literature", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Publisher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("publishers", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Type", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("types", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Writing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("writings", (string)null);
                });

            modelBuilder.Entity("LiteratureHasWriting", b =>
                {
                    b.Property<long>("LiteratureId")
                        .HasColumnType("bigint");

                    b.Property<long>("WritingId")
                        .HasColumnType("bigint");

                    b.HasKey("LiteratureId", "WritingId");

                    b.HasIndex("WritingId");

                    b.ToTable("literature_has_writings", (string)null);
                });

            modelBuilder.Entity("WritingHasAuthor", b =>
                {
                    b.Property<long>("WritingId")
                        .HasColumnType("bigint");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.HasKey("WritingId", "AuthorId");

                    b.HasIndex("AuthorId");

                    b.ToTable("writing_has_authors", (string)null);
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Exemplar", b =>
                {
                    b.HasOne("Catalog.DAL.Entity.Literature", "Literature")
                        .WithMany("Exemplars")
                        .HasForeignKey("LiteratureId")
                        .IsRequired()
                        .HasConstraintName("FK_exemplars_literature");

                    b.Navigation("Literature");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Literature", b =>
                {
                    b.HasOne("Catalog.DAL.Entity.Author", "Author")
                        .WithMany("Literatures")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_literature_authors");

                    b.HasOne("Catalog.DAL.Entity.Genre", "Genre")
                        .WithMany("Literatures")
                        .HasForeignKey("GenreId")
                        .IsRequired()
                        .HasConstraintName("FK_literature_genres");

                    b.HasOne("Catalog.DAL.Entity.Publisher", "Publisher")
                        .WithMany("Literatures")
                        .HasForeignKey("PublisherId")
                        .IsRequired()
                        .HasConstraintName("FK_literature_publishers");

                    b.HasOne("Catalog.DAL.Entity.Type", "Type")
                        .WithMany("Literatures")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_literature_types");

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("Publisher");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("LiteratureHasWriting", b =>
                {
                    b.HasOne("Catalog.DAL.Entity.Literature", null)
                        .WithMany()
                        .HasForeignKey("LiteratureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_literature_has_writings_literature");

                    b.HasOne("Catalog.DAL.Entity.Writing", null)
                        .WithMany()
                        .HasForeignKey("WritingId")
                        .IsRequired()
                        .HasConstraintName("FK_literature_has_writings_writings");
                });

            modelBuilder.Entity("WritingHasAuthor", b =>
                {
                    b.HasOne("Catalog.DAL.Entity.Author", null)
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_writing_has_authors_authors");

                    b.HasOne("Catalog.DAL.Entity.Writing", null)
                        .WithMany()
                        .HasForeignKey("WritingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_writing_has_authors_writings");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Author", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Genre", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Literature", b =>
                {
                    b.Navigation("Exemplars");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Publisher", b =>
                {
                    b.Navigation("Literatures");
                });

            modelBuilder.Entity("Catalog.DAL.Entity.Type", b =>
                {
                    b.Navigation("Literatures");
                });
#pragma warning restore 612, 618
        }
    }
}
